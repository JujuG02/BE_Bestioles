@startuml
class Aquarium {
  - Milieu * flotte
  - int delay
  + Aquarium(int width, int height, int _delay)
  + ~Aquarium()
  + Milieu & getMilieu()
  + void run()
}

class Milieu {
  - static const T white[]
  - int width
  - int height
  - std::vector<Bestiole> listeBestioles
  + Milieu(int _width, int _height)
  + ~Milieu()
  + int getWidth() const
  + int getHeight() const
  + void step()
  + void addMember(const Bestiole & b)
  + int nbVoisins(const Bestiole & b)
}

class Bestiole {
  - static const double AFF_SIZE
  - static const double MAX_VITESSE
  - static const double LIMITE_VUE
  - static int next
  - int identite
  - int x
  - int y
  - double cumulX
  - double cumulY
  - double orientation
  - double vitesse
  - T * couleur
  + Bestiole()
  + Bestiole(const Bestiole & b)
  + ~Bestiole()
  + void action(Milieu & monMilieu)
  + void draw(UImg & support)
  + bool jeTeVois(const Bestiole & b) const
  + void initCoords(int xLim, int yLim)
  + friend bool operator==(const Bestiole & b1, const Bestiole & b2)
}

class UImg {
}

Aquarium --> Milieu : contient
Milieu --> Bestiole : contient
Bestiole --> UImg : utilise
@enduml
